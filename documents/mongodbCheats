Here is a list of commands that you can use in the console client, you can get the full list of commands by typing "help":

show dbs                # show database names
show collections        # show collections in current database
show users              # show users in current database
show profile            # show most recent system.profile entries with time >= 1ms
show logs               # show the accessible logger names
show log [name]         # prints out the last segment of log in memory, 'global' is default
use &gt;db_name&lt;     #  set current database
db.foo.find()           # list objects in collection foo
db.foo.find( { a : 1 } )  #list objects in foo where a == 1
it                      #result of the last line evaluated; use to further iterate
exit                    #quit the mongo shell


db.users.insert(
               {name: "sue", age: 26, status: "A", groups: ["news","sports"]}
               )
db.users.insert(
               {name: "jan", age: 21, status: "A", groups: ["music","sports"]}
               )             

db.inventory.insert( { _id: 10, type: "misc", item: "card", qty: 15 } )
In the example, the document has a user-specified _id field value of 10. The value must be unique within the inventory collection.

> show collections
contacts
system.indexes
users
> db.users.find()
{ "_id" : ObjectId("52cf36e37978b6547e561f04"), "name" : "sue", "age" : 26, "status" : "A", "groups" : [  "news",  "sports" ] }
{ "_id" : ObjectId("52cf371b7978b6547e561f05"), "name" : "jan", "age" : 21, "status" : "A", "groups" : [  "music",  "sports" ] }
> db.inventory.insert( { _id: 10, type: "misc", item: "card", qty: 15 } )
> db.inventory.find()
{ "_id" : 10, "type" : "misc", "item" : "card", "qty" : 15 }
> 



> db
nodetest2
> show collections
system.indexes
usercollection

> db.usercollection.find()
{ "_id" : ObjectId("52ab59798e138fa72f068c1b"), "username" : "fred", "realname" : "Fred Flintstone", "phone" : "123-4567", "address" : "123 Rocky Rd.", "email" : "fred@bedrock.net" }
{ "_id" : ObjectId("52ab598b8e138fa72f068c1c"), "username" : "wilma", "realname" : "Wilma Flintstone", "phone" : "123-4567", "address" : "123 Rocky Rd.", "city" : "Bedrock", "email" : "wilma@bedrock.net" }
{ "_id" : ObjectId("52ab598b8e138fa72f068c1d"), "username" : "Barney", "realname" : "Barney Rubble", "phone" : "123-4567", "address" : "123 Rocky Rd.", "email" : "barney@bedrock.net" }


app.get('/userlist',function(req,res){
  db.driver.admin.listDatabases(function(e,dbs){
      res.json(dbs);
  });
});

get() function just takes two parameters: string and function. The string can have slashes and colons, for example product/:id. The function must have two parameters request and response. Request has all the information like query string parameters, session, headers and response is an object to with we output the results. In this case we do it by calling res.json() function. db.driver.admin.listDatabases() as you might guess give us a list of databases in async manner.

Two other routes are set up in a similar manner with get() function:

app.get('/collections',function(req,res){
  db.driver.collectionNames(function(e,names){
    res.json(names);
  })
});
app.get('/userlist/:name',function(req,res){
  var collection = db.get('usercollection');
  collection.find({},{limit:20},function(e,docs){
    res.json(docs);
  })
});


 app.use(express.errorHandler({showStack: true, dumpExceptions: true}));
app.use(errorHandler);

